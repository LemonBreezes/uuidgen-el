UUID-el
=======

This is a naive implementation of RFC4122 Universally Unique
IDentifier generation in elisp.  Currently implemented are UUID v1
v3, v4 and v5 generation.  The resolution of the time based UUID is
microseconds, which is 10 times of the suggested 100-nanosecond
resolution, but should be enough for general usage.

APIs
----

* Function uuid-1

  Generate time based UUID, aka UUIDv1.

* Function uuid-4

  Generate UUID form random numbers, aka UUIDv4.

* Function uuid-3 (ns name)

  Generate name based UUID using MD5 hash algorithm, aka UUIDv3.  NS
  should be a generated UUID or predefined namespaces, `uuid-ns-dns',
  `uuid-ns-url', `uuid-ns-oid', `uuid-ns-x500'.  NAME is the node name
  string.

* Function uuid-5 (ns name)

  Generate name based UUID using SHA-1 hash algorithm, aka UUIDv5.  NS
  should be a generated UUID or predefined namespaces, `uuid-ns-dns',
  `uuid-ns-url', `uuid-ns-oid', `uuid-ns-x500'.  NAME is the node name
  string.

* Function uuid-cid (&optional uuid)

  Return UUID string in CID format that is suitable for COM definition.
  If UUID is nil will generate UUID-4 automatically.
  You customize `uuid-cid-format-string' to change the default format.

* Command insert-uuid-cid (uuid)

  Insert UUID string in CID format that is suitable for COM definition.
  If UUID is nil will generate UUID-4 automatically.
  You customize `uuid-cid-format-string' to change the default format.

* Command uuid (random)

  Insert UUID-1 at point. If RANDOM is non-nil, insert UUID-4 instead.
